# Hello World!

[Elixir](https://elixir-lang.org) is a dynamic, functional programming language for building scalable and maintainable applications. It puts the FUN back into **FUN**ctional programming! This guide will walk you through its basics in less than 30 minutes! Let's get started.

If you want to run the following code yourself, there are three options:

1. Start an IEx REPL with `iex -S mix` and copy and paste the code into the command line.
2. Copy and paste the code into an Elixir script file, like `script.exs`, and run `mix run script.exs`.
3. Simply click the `Run in Livebook` button above each file to open it in an interactive notebook.

## Hello World

Here's how you write a `Hello World` script in Elixir.

```elixir
IO.inspect("Hello World!")
```

<!-- livebook:{"output":true} -->

```
"Hello World!"
```

## Variable assignment

Assigning a value to a variable is super simple in Elixir. You just write `my_var =` and whatever is on the right side of the `=` sign gets assigned to the variable. Here is how to assign all the different basic types to variables:

```elixir
name = "Peter" # String
age = 32 # Integer
age_hex = 0x20 # Integer in hexadecimal
height = 190.47 # Float
height_sci = 1.9047e2 # Float in scientific notation
adult? = true # Boolean
status = :active # Atom
address = nil # The 'None/null/Nil' value

IO.inspect([name, age, age_hex, height, height_sci, adult?, status, address])
```

<!-- livebook:{"output":true} -->

```
["Peter", 32, 32, 190.47, 190.47, true, :active, nil]
```

Variables are **immutable** but can be reassigned. This means that the memory holding the old value will not be overwritten; instead, new memory is allocated to hold the new value while the old value remains until garbage collected. Even if you modify a variable, it is not updated in place but copied to a new chunk of memory. This might seem wasteful, but it prevents different processes from modifying the same variable.

```elixir
age = 32
age = 21
IO.inspect(age)
```

<!-- livebook:{"output":true} -->

```
21
```

You can ignore assignments by prefixing the variable name with an underscore:

```elixir
_ = 30
_result = 30 + 32
```

## String Interpolation

You can interpolate strings in two ways:

```elixir
# Interpolate a string with values
name = "Peter"
age = 32
IO.inspect("I'm #{name} and ")

```