# Structs

A `Struct` is an extension of a `Map` and is defined inside a `Module`. It allows you to define the fields of a map at compile-time and raises if you try to set a field that doesn't exist. You can define a struct with `defstruct/1`.

```elixir
defmodule RunElixir.Profile do
  # You can make fields required with this attribute
  @enforce_keys [:name]
  defstruct [:name, :age, status: :active] # <- We set a default value for :status here.

  @legal_age 18

  # You can match against the struct fields in your function definition.
  def adult?(%RunElixir.Profile{age: age}) do
    age >= @legal_age
  end
end
```

You can create a struct like this:

```elixir
struct = %RunElixir.Profile{name: "Peter", age: 21}

# You can access the struct's fields using the dot-notation
struct.name |> IO.inspect(label: 1)
struct.status |> IO.inspect(label: 2)
```

<!-- livebook:{"output":true} -->

```
1: "Peter"
2: :active
```

Structs give you some nice checks for free, like an exception if you try to set a field that doesn't exist.

```elixir
struct = %RunElixir.Profile{height: 190}
```

<!-- livebook:{"output":true} -->

```
** (KeyError) key :height not found
    expanding struct: RunElixir.Profile.__struct__/1
```

Structs can also require fields and raise if they are not set.

```elixir
struct = %RunElixir.Profile{age: 21}
```

<!-- livebook:{"output":true} -->

```
** (ArgumentError) the following keys must also be given when building struct RunElixir.Profile: [:name]
    expanding struct: RunElixir.Profile.__struct__/1
```