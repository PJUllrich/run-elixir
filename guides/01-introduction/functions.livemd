# Functions

Since Elixir is a *functional* programming language, functions are first-class citizens and the foundation for everything you build. You already saw how to define a function inside a module, but let's elaborate on this a bit.

```elixir
defmodule ElixirByExample.Profile do
  # You can define multiple function "clauses" which match against certain values.

  # This one will match all integer values from 18 to 150.
  # The >= and <= operators are called 'Guards'
  def adult?(age) when age >= 18 and age <= 150 do
    true
  end

  # This clause will match integer values from 0 to 17.
  def adult?(age) when age >= 0 do
    false
  end

  # This function will match all values that didn't match the function clauses above.
  # This could be integer values outside the range from 0 to 150 or other data types.
  #
  # This is also how you write a one-line function without the do ... end notation.
  def adult?(age), do: raise "Invalid age: #{age}"
end
```

## Default values

You can define default values using the `\\` symbol, like this:

```elixir
defmodule ElixirByExample.Profile do
  @legal_age 18

  def adult?(age, legal_age \\ @legal_age) do
    age >= legal_age
  end
end
```

Now, you can either use the default value or overwrite it like this:

```elixir
ElixirByExample.Profile.adult?(18) |> IO.inspect(label: 1)
ElixirByExample.Profile.adult?(18, 21) |> IO.inspect(label: 2)
```

<!-- livebook:{"output":true} -->

```
1: true
2: false
```

If you want to define a default value for multiple function clauses, you need to create a `function head`, like this:

```elixir
defmodule ElixirByExample.Profile do
  @legal_age 18

  # This is the function head which defines the default value and has no body.
  def adult?(age, legal_age \\ @legal_age)

  def adult?(age, legal_age) when age >= legal_age do
    true
  end

  def adult?(age, legal_age) when age >= 0 and age < legal_age do
    false
  end

  def adult?(age, _legal_age), do: raise("Invalid age: #{age}")
end
```

## Anonymous Functions

Return values

